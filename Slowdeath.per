;******************************************************************************
;
; Defconst Rules 
;
;******************************************************************************
#load-if-defined DIFFICULTY-EASY
(defconst dark-age-max-villagers 25)
(defconst feudal-age-max-villagers 30)
#else
(defconst dark-age-max-villagers 30)
(defconst feudal-age-max-villagers 35)
#end-if
(defconst town-center-foundation 621)

;******************************************************************************
;
; Goal Values
;
;******************************************************************************

; general conveninece stuff
(defconst gv-off 0)
(defconst gv-on 1)
(defconst gv-no 0)
(defconst gv-yes 1)

; age values
(defconst gv-dark-age 0)
(defconst gv-advancing-to-feudal 1)
(defconst gv-feudal-age 2)
(defconst gv-advancing-to-castle 3)
(defconst gv-castle-age 4)
(defconst gv-advancing-to-imperial 5)
(defconst gv-imperial-age 6)

;******************************************************************************
;
; Goals
;
;******************************************************************************
(defconst g-age-status 1) ;Goal 1

;******************************************************************************
;
; Starting Strategic Numbers
;
;******************************************************************************
(defrule
(true)
=>
(set-strategic-number sn-minimum-civilian-explorers 0); minimum number of vills to explore
(set-strategic-number sn-cap-civilian-explorers 0); max number of vills to explore
;(set-strategic-number sn-total-number-explorers 1); total number of explorers
(set-strategic-number sn-number-explore-groups 1); number of explore groups , only 1 group means entire pop can explore
(set-strategic-number sn-initial-exploration-required 0); percent to explore before building
(disable-self)
)

(defrule
   (true)
   =>
   (set-strategic-number sn-camp-max-distance 8)
   (set-strategic-number sn-initial-exploration-required 0)
   (set-strategic-number sn-food-dropsite-distance -1)
   (set-strategic-number sn-wood-dropsite-distance -1)
;Next two strategic numbers are set to try to get first mining camp at gold.
;Like many things in the game, it is not 100%, but I would say it works over 
;90% of the time.
   (set-strategic-number sn-stone-dropsite-distance 100)
   (set-strategic-number sn-gold-dropsite-distance 35)
   (disable-self)
)

(defrule
   (true)
   =>
   (set-strategic-number sn-gold-defend-priority 1)
   (set-strategic-number sn-stone-defend-priority 0)
   (set-strategic-number sn-forage-defend-priority 0)
   (set-strategic-number sn-relic-defend-priority 0)
   (set-strategic-number sn-town-defend-priority 0)
   (set-strategic-number sn-task-ungrouped-soldiers 0) ; dont scatter villagers
   (set-strategic-number sn-gather-idle-soldiers-at-center 0); useful for stopping tsa. how? 
   (set-strategic-number sn-minimum-town-size 1) ; defend enemy attack
   (set-strategic-number sn-maximum-town-size 16)
   (set-strategic-number sn-enemy-sighted-response-distance 2)
   (disable-self)
)

(defrule
   (true)
   =>
    (set-strategic-number sn-maximum-food-drop-distance 15)
    (set-strategic-number sn-maximum-wood-drop-distance 5)
    (set-strategic-number sn-maximum-stone-drop-distance 5)
    (set-strategic-number sn-maximum-gold-drop-distance 5)
    (set-strategic-number sn-maximum-hunt-drop-distance 15)
    (set-strategic-number sn-maximum-fish-boat-drop-distance 15)
    (set-strategic-number sn-mill-max-distance 15)
    (set-strategic-number sn-cap-civilian-builders 10) ;max number of builders
    (disable-self)
)

(defrule
   (true)
   =>
   (set-strategic-number sn-intelligent-gathering gv-on)
)
;******************************************************************************
;
; Initialization Rules
;
;******************************************************************************
(defrule
   (true)
   =>
   (set-goal g-age-status gv-dark-age)
   (disable-self)
)
(defrule
	(true)
=>
	(up-assign-builders c: house c: 2)
	(disable-self)
)

(defrule
	(building-type-count-total house > 1)
=>
	(up-assign-builders c: house c: 1)
	(disable-self)
)

(defrule
	(true)
=>
	(up-assign-builders c: castle c: 5)
	(disable-self)
)

(defrule
	(true)
=>
	(up-assign-builders c: town-center-foundation c: 4) ; town-center-foundation = 621
	(disable-self)
)

; lumber placement rules, copied from BearTheGreat tutorial
(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 240)
   =>
   (set-strategic-number sn-camp-max-distance 11)
   (chat-local-to-self "Camp distance 11.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 420)
   =>
   (set-strategic-number sn-camp-max-distance 13)
   (chat-local-to-self "Camp distance 13.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 600)
   =>
   (set-strategic-number sn-camp-max-distance 15)
   (chat-local-to-self "Camp distance 15.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 960)
   =>
   (set-strategic-number sn-camp-max-distance 17)
   (chat-local-to-self "Camp distance 17.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time < 1500)
   =>
   (set-strategic-number sn-camp-max-distance 20)
   (chat-local-to-self "Camp distance 20.")
   (disable-self)
)

(defrule
   (resource-found wood)
   (strategic-number sn-camp-max-distance == 8)
   (game-time > 1500)
   =>
   (set-strategic-number sn-camp-max-distance 22)
   (chat-local-to-self "Camp distance 22.")
   (disable-self)
)

;I added the next two rules as acts of desperation.  They rarely fire on a
;standard map.

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 19)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-to-allies "Wood further away than 22 tiles!")
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

(defrule
   (current-age == dark-age)
   (wood-amount > 200)
   (population > 21)
   (building-type-count-total lumber-camp == 0)
   =>
   (set-strategic-number sn-camp-max-distance 45)
   (chat-to-allies "Wood further away than 35 tiles!")
   (chat-local-to-self "Camp distance 45.")
   (disable-self)
)
; end of first lumber placement rules

(defrule
   (building-type-count-total lumber-camp > 0)
   (strategic-number sn-camp-max-distance < 35)
   =>
   (set-strategic-number sn-camp-max-distance 35)
   (chat-local-to-self "Camp distance 35.")
   (disable-self)
)

;******************************************************************************
;
; Market Rules
;
;******************************************************************************
(defrule
   (current-age >= feudal-age)  
   (wood-amount > 400)
   (or(gold-amount < 200)
      (food-amount < 800))
   (can-sell-commodity wood)
   =>
   (sell-commodity wood)
)

;Buy food if you have surplus gold.

(defrule
   (current-age >= feudal-age)  
   (gold-amount > 400)
   (food-amount < 800)
   (can-buy-commodity food)
   =>
   (buy-commodity food)
)

;Sell food if you have surplus food.

(defrule
   (current-age >= feudal-age)  
   (gold-amount < 200)
   (food-amount > 1000)
   (can-sell-commodity food)
   =>
   (sell-commodity food)
)


(defrule
   (current-age == imperial-age)  
   (gold-amount < 500)
   (food-amount > 1500)
   (can-sell-commodity food)
   =>
   (sell-commodity food)
)
(defrule
   (current-age == imperial-age)  
   (gold-amount < 800)
   (wood-amount > 1500)
   (can-sell-commodity wood)
   =>
   (sell-commodity wood)
)
;******************************************************************************
;
; Economy Rules
;
;******************************************************************************
(defrule
	(unit-type-count villager <= 6)
=>
	(set-strategic-number sn-wood-gatherer-percentage 0)
	(set-strategic-number sn-food-gatherer-percentage 100)	;6
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager <= 7)
=>
	(set-strategic-number sn-wood-gatherer-percentage 14)  ;1
	(set-strategic-number sn-food-gatherer-percentage 86)	 ;6
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager <= 8)
=>
	(set-strategic-number sn-wood-gatherer-percentage 25) ;2
	(set-strategic-number sn-food-gatherer-percentage 75)	;6
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 9)
=>
	(set-strategic-number sn-wood-gatherer-percentage 33) ;3
	(set-strategic-number sn-food-gatherer-percentage 66) ;6
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 10)
=>
	(set-strategic-number sn-wood-gatherer-percentage 30)	;3
	(set-strategic-number sn-food-gatherer-percentage 70)	;7
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 11)
=>
	(set-strategic-number sn-wood-gatherer-percentage 28)	;3
	(set-strategic-number sn-food-gatherer-percentage 72)	;8
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 12)
=>
	(set-strategic-number sn-wood-gatherer-percentage 34)	;4
	(set-strategic-number sn-food-gatherer-percentage 66)	;8
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 13)
=>
	(set-strategic-number sn-wood-gatherer-percentage 31)	;4
	(set-strategic-number sn-food-gatherer-percentage 69)	;9
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 14)
=>
	(set-strategic-number sn-wood-gatherer-percentage 29)	;4
	(set-strategic-number sn-food-gatherer-percentage 71)	;10
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 15)
=>
	(set-strategic-number sn-wood-gatherer-percentage 34)	;5
	(set-strategic-number sn-food-gatherer-percentage 66)	;10
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 16)
=>
	(set-strategic-number sn-wood-gatherer-percentage 38)	;6
	(set-strategic-number sn-food-gatherer-percentage 62)	;10
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 17)
=>
	(set-strategic-number sn-wood-gatherer-percentage 42)	;7
	(set-strategic-number sn-food-gatherer-percentage 58)	;10
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
	(unit-type-count villager == 18)
=>
	(set-strategic-number sn-wood-gatherer-percentage 45)	;8
	(set-strategic-number sn-food-gatherer-percentage 55)	;10
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 19)
=>
	(set-strategic-number sn-wood-gatherer-percentage 43)	;8
	(set-strategic-number sn-food-gatherer-percentage 57)	;11
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 20)
=>
	(set-strategic-number sn-wood-gatherer-percentage 40)	;8
	(set-strategic-number sn-food-gatherer-percentage 60)	;12
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 21)
=>
	(set-strategic-number sn-wood-gatherer-percentage 39)	;8
	(set-strategic-number sn-food-gatherer-percentage 61)	;13
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 22)
=>
	(set-strategic-number sn-wood-gatherer-percentage 41)	;9
	(set-strategic-number sn-food-gatherer-percentage 59)	;13
	(set-strategic-number sn-gold-gatherer-percentage 0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 23)
=>
	(set-strategic-number sn-wood-gatherer-percentage 45)	;10
	(set-strategic-number sn-food-gatherer-percentage 55)	;13
	(set-strategic-number sn-gold-gatherer-percentage 0)	;1
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 24)
=>
	(set-strategic-number sn-wood-gatherer-percentage 38)	;9
	(set-strategic-number sn-food-gatherer-percentage 53)	;13
	(set-strategic-number sn-gold-gatherer-percentage 9)	;2
	(set-strategic-number sn-stone-gatherer-percentage 0)
)
(defrule
	(unit-type-count villager == 25)
=>
	(set-strategic-number sn-wood-gatherer-percentage 40)	;10
	(set-strategic-number sn-food-gatherer-percentage 52)	;13
	(set-strategic-number sn-gold-gatherer-percentage 2)	;3
	(set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
   (or(goal g-age-status gv-advancing-to-feudal)
      (goal g-age-status gv-advancing-to-castle)
   )
   =>
   (set-strategic-number sn-food-gatherer-percentage 35)
   (set-strategic-number sn-wood-gatherer-percentage 55)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
   (disable-self)
)
(defrule
   (goal g-age-status gv-feudal-age)  
   =>
   (set-strategic-number sn-food-gatherer-percentage 40)
   (set-strategic-number sn-wood-gatherer-percentage 45)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 5)
   (disable-self)
)

(defrule
   (goal g-age-status gv-castle-age) 
   =>
   (set-strategic-number sn-food-gatherer-percentage 40)
   (set-strategic-number sn-wood-gatherer-percentage 40)
   (set-strategic-number sn-gold-gatherer-percentage 15)
   (set-strategic-number sn-stone-gatherer-percentage 5)
   (set-strategic-number sn-maximum-town-size 25)
   (disable-self)
)

(defrule
   (goal g-age-status gv-imperial-age)   
   =>
   (set-strategic-number sn-food-gatherer-percentage 50)
   (set-strategic-number sn-wood-gatherer-percentage 30)
   (set-strategic-number sn-gold-gatherer-percentage 15)
   (set-strategic-number sn-stone-gatherer-percentage 5)
   (set-strategic-number sn-maximum-town-size 36)
   (disable-self)
)
;******************************************************************************
;
; Research Rules
;
;******************************************************************************

;######################## Age Advance ############################
(defrule 
(goal g-age-status gv-advancing-to-feudal)                                    
   (research-available feudal-age)
   =>
   (chat-to-allies "Age research misfire!")
   (set-goal g-age-status gv-dark-age)
)

(defrule
   (can-research feudal-age)
   =>
   (research feudal-age)
   (set-goal g-age-status gv-advancing-to-feudal) 
)

(defrule                        
   (current-age == feudal-age)
   =>
   (set-goal g-age-status gv-feudal-age)
   (disable-self)
)

(defrule                                      
   (goal g-age-status gv-advancing-to-castle)
   (research-available castle-age)
   =>
   (chat-to-allies "Age research misfire!")
   (set-goal g-age-status gv-feudal-age)
)

(defrule
   (not(can-research ri-wheel-barrow))
   (can-research castle-age)
   =>
   (research castle-age)
   (set-goal g-age-status gv-advancing-to-castle) 
   (chat-to-allies "Researching Castle Age")      
)

(defrule                       
   (current-age == castle-age)
   =>
   (set-goal g-age-status gv-castle-age)
   (disable-self)
)

(defrule                                        
   (goal g-age-status gv-advancing-to-imperial)
   (research-available imperial-age)
   =>
   (chat-to-allies "Age research misfire!")
   (set-goal g-age-status gv-castle-age)
)

(defrule
   (can-research imperial-age)
   =>
   (research imperial-age)
   (set-goal g-age-status gv-advancing-to-imperial) 
   (chat-to-allies "Researching Imperial Age")     
)

(defrule                         
   (current-age == imperial-age)
   =>
   (set-goal g-age-status gv-imperial-age)
   (disable-self)
)

;#################### Dark Age ######################

(defrule
   (food-amount < 50)
   (can-research ri-loom)
   =>
   (research ri-loom)
   (chat-local-to-self "Researching loom.")
)

(defrule
   (town-under-attack)
   (can-research ri-loom)
   =>
   (research ri-loom)
   (chat-local-to-self "Researching loom.")
)

;##################### Feudal Age Research #################
(defrule
   (can-research castle-age)
   =>
   (research ri-wheel-barrow)
   (chat-to-allies "Researching wheel barrow.")
)

(defrule
   (current-age == feudal-age) 
   (unit-type-count-total villager > 26) 
   (can-research ri-wheel-barrow)
   =>
   (research ri-wheel-barrow)
   (chat-to-allies "Researching wheel barrow.")
)

(defrule
   (current-age == imperial-age)
   (can-research ri-man-at-arms)
   =>
   (research ri-man-at-arms)
   (chat-to-allies "Researching man at arms.")
)

(defrule
   (can-research ri-double-bit-axe)
   =>
   (research ri-double-bit-axe)
   (chat-to-allies "Researching double bit axe.")
)

(defrule
   (current-age == castle-age)
   (not(research-available ri-double-bit-axe))
   (can-research ri-gold-mining)
   =>
   (research ri-gold-mining)
   (chat-to-allies "Researching gold mining.")
)

(defrule
   (can-research ri-horse-collar)
   =>
   (research ri-horse-collar)
   (chat-to-allies "Researching horse collar.")
)

(defrule
   (current-age == castle-age)
   (not(research-available ri-pikeman))
   (can-research ri-scale-mail)
   =>
   (research ri-scale-mail)
   (chat-to-allies "Researching scale mail armor.")
)

(defrule
   (current-age == castle-age)
   (research-completed ri-scale-mail)
   (can-research ri-forging)
   =>
   (research ri-forging)
   (chat-to-allies "Researching forging.")
)
; ################################## Castle Age Research
(defrule
   (building-type-count town-center >= 2)
   (can-research ri-hand-cart)
   =>
   (research ri-hand-cart)
   (chat-to-allies "Researching hand cart.")
)

(defrule
   (building-type-count town-center >= 2)
   (can-research ri-bow-saw)
   =>
   (research ri-bow-saw)
   (chat-to-allies "Researching bow saw.")
)

(defrule
   (building-type-count town-center >= 2)
   (can-research ri-heavy-plow)
   =>
   (research ri-heavy-plow)
   (chat-to-allies "Researching heavy plow.")
)

(defrule
   (or(building-type-count-total town-center >= 3)
      (goal g-age-status gv-imperial-age))
   (can-research ri-chain-mail)
   =>
   (research ri-chain-mail)
   (chat-to-allies "Researching chain mail armor.")
)

(defrule
   (or(building-type-count-total town-center >= 3)
      (goal g-age-status gv-imperial-age))
   (can-research ri-iron-casting)
   =>
   (research ri-iron-casting)
   (chat-to-allies "Researching iron casting.")
)

(defrule
   (or(building-type-count-total town-center >= 3)
      (goal g-age-status gv-imperial-age))
   (can-research ri-gold-shaft-mining)
   =>
   (research ri-gold-shaft-mining)
   (chat-to-allies "Researching gold-shaft-mining.")
)

(defrule
   (or(building-type-count-total town-center >= 3)
      (goal g-age-status gv-imperial-age))
   (can-research ri-stone-shaft-mining)
   =>
   (research ri-stone-shaft-mining)
   (chat-to-allies "Researching stone-shaft-mining.")
)

(defrule
   (can-research ri-two-man-saw)
   =>
   (research ri-two-man-saw)
   (chat-to-allies "Researching two-man-saw")
)

(defrule
   (can-research ri-crop-rotation)
   =>
   (research ri-crop-rotation)
   (chat-to-allies "Researching crop-rotation")
)
(defrule
   (can-research ri-guilds)
   =>
   (research ri-guilds)
   (chat-to-allies "Researching guilds.")
)

(defrule
   (building-type-count-total castle > 0)
   (can-research ri-murder-holes)
   =>
   (research ri-murder-holes)
)

(defrule
   (building-type-count-total castle > 0)
   (can-research ri-chemistry)
   =>
   (research ri-chemistry)
)

(defrule
   (town-under-attack)
   (can-research ri-fletching)
   =>
   (research ri-fletching)
   (chat-to-allies "Researching fletching.")
)

(defrule
   (town-under-attack)
   (can-research ri-bodkin-arrow)
   =>
   (research ri-bodkin-arrow)
   (chat-to-allies "Researching bodkin-arrow.")
)

(defrule
   (town-under-attack)
   (can-research ri-bracer)
   =>
   (research ri-bracer)
   (chat-to-allies "Researching bracer.")
)
(defrule
   (town-under-attack)
   (current-age == imperial-age)
   (can-research ri-ballistics)
   =>
   (research ri-ballistics)
   (chat-to-allies "Researching ballistics.")
)

(defrule
   
   (can-research ri-masonry)
   (town-under-attack)
   =>
   (research ri-masonry)
   (chat-to-allies "Researching masonry.")
)

(defrule
   (current-age >= castle-age)
   (can-research ri-stone-mining)
   =>
   (research ri-stone-mining)
   (chat-to-allies "Researching stone mining.")
)

;*******************LINE OF SIGHT
(defrule
   (unit-type-count villager > 100)
   (can-research ri-town-watch)
   =>
   (research ri-town-watch)
   (chat-to-allies "Researching town-watch.")
)

(defrule
   (unit-type-count villager > 100)
   (gold-amount > 500)
   (can-research ri-town-patrol)
   =>
   (research ri-town-patrol)
   (chat-to-allies "Researching town-patrol.")
)
;******************************************************************************
;
; Escrow Rules
;
;******************************************************************************

;******************************************************************************
;
; Build Rules
;
;******************************************************************************
#load-if-not-defined HUN-CIV

(defrule
   (housing-headroom < 4)
   (population-headroom > 3)
   (can-build house)
   =>
   (build house)
)
; Increase housing headroom so that your housing will not
;limit your troop production.

(defrule
   (or(current-age > dark-age)
      (and(goal g-age-status gv-advancing-to-feudal)
          (building-type-count-total barracks > 1)))
   (housing-headroom < 10)
   (population-headroom > 3)
   (can-build house)
   =>
   (build house)
)
#end-if

;********************** lumber camp rules ******************
(defrule
   (goal g-age-status gv-dark-age)
   (resource-found wood)
   (building-type-count-total lumber-camp < 1)
   (can-build lumber-camp)
   =>
   (build lumber-camp)
)

(defrule
   (current-age <= feudal-age)
   (building-type-count lumber-camp == 1)
   (dropsite-min-distance wood > 5)
   =>
   (chat-to-allies "Bad lumber camp.")
   (set-strategic-number sn-camp-max-distance 45)
   (chat-local-to-self "Camp distance 45.")
   (set-strategic-number sn-maximum-wood-drop-distance -1)
   (disable-self)
)

(defrule
   (building-type-count-total lumber-camp == 2)
   =>
   (set-strategic-number sn-maximum-wood-drop-distance 5)
   (disable-self)
)

(defrule
   (or(current-age >= feudal-age)
      (strategic-number sn-camp-max-distance == 45))
   (dropsite-min-distance wood > 5)
   (can-build lumber-camp)
   =>
   (build lumber-camp)
)

;*************** lumber camp rules end************************
(defrule
    (building-type-count-total house > 0) ; We want to build a house before a mill
    (building-type-count-total lumber-camp > 0)
    (building-type-count-total mill == 0) ; Prevents the construction of multiple mills
    (resource-found food) ; Builds a mill only if forage bushes or deer is found
    (can-build mill)
    =>
    (chat-local-to-self "building mill.")
    (build mill)
)

(defrule
   (or(current-age > dark-age)
      (goal g-age-status gv-advancing-to-feudal)) 
   (building-type-count mining-camp < 4)
   ;(cc-players-unit-type-count 0 66 > 0)
   (dropsite-min-distance gold > 5)
   (dropsite-min-distance gold < 255)
   (can-build mining-camp)
   =>
   (build mining-camp)
)

; barrack rules
(defrule
   (or(goal g-age-status gv-advancing-to-castle)
      (goal g-age-status gv-advancing-to-feudal))
   (building-type-count-total mining-camp > 0)
   (building-type-count-total barracks < 1)
   (can-build barracks)
   =>
   (build barracks)
)

(defrule
   (town-under-attack)
   (unit-type-count villager > 40) ; if under attack make a second barrack
   (building-type-count-total barracks < 2)
   (can-build barracks)
   =>
   (build barracks)
)


(defrule
   (town-under-attack)
   (players-unit-type-count any-enemy archer-line > 5)
   (building-type-count-total archery-range < 1)
   (can-build archery-range)
   =>
   (build archery-range)
)

; build a blacksmith

(defrule
   (current-age >= feudal-age)
   (building-type-count-total blacksmith == 0)
   (can-build blacksmith)
   =>
   (chat-local-to-self "building blacksmith.")
   (build blacksmith)
)

; build a market
(defrule
   (current-age == feudal-age)
   (building-type-count-total market == 0)
   (can-build market)
   =>
   (chat-local-to-self "building market.")
   (build market)
)

; build a stone mine in castle age
(defrule
    (current-age >= feudal-age)  
    (building-type-count-total mining-camp > 0)
    (resource-found stone)
    (dropsite-min-distance stone > 5)
    (can-build mining-camp)
    =>
    (chat-local-to-self "building mining-camp.")
    (build mining-camp)
)

; 2nd mining camp for gold if necessary
(defrule
    (current-age >= feudal-age)  
    (building-type-count-total mining-camp > 0)
    (resource-found gold)
    (dropsite-min-distance gold > 5)
    (can-build mining-camp)
    =>
    (chat-local-to-self "building mining-camp.")
    (build mining-camp)
)

; build a monastery
(defrule
   (not(town-under-attack))
   (current-age == castle-age)
   (building-type-count-total monastery == 0)
   (building-type-count-total town-center > 2)
   (can-build monastery)
   =>
   (chat-local-to-self "building monastery.")
   (build monastery)
)

; build a university
(defrule
   (not(town-under-attack))
   (current-age == castle-age)
   (building-type-count-total town-center > 2)
   (building-type-count-total university == 0)
   (can-build university)
   =>
   (chat-local-to-self "building university.")
   (build university)
)

(defrule
   (current-age >= castle-age)
   (building-type-count-total town-center <= 1)
   (can-build town-center)
   =>
   (chat-local-to-self "building town-center.")
   (build town-center)
)

(defrule
   (not(town-under-attack))
   (current-age >= castle-age)
   (building-type-count-total town-center < 4)
   (unit-type-count villager < 80) ; dont make TC if already have 80 vills.
   (can-build town-center)
   =>
   (chat-local-to-self "building town-center.")
   (build town-center)
)

(defrule
   (current-age >= castle-age)
   (can-build castle)
   =>
   (chat-local-to-self "building castle.")
   (build castle)
)

;build upto 10 barracks in imperial age
(defrule
   (current-age > castle-age)
   (building-type-count-total barracks < 10)
   (can-build barracks)
   =>
   (chat-local-to-self "building barracks.")
   (build barracks)
)
;build couple of seige workshops in imperial age
(defrule
   (current-age > castle-age)
   (building-type-count-total barracks > 6)
   (military-population > 80)
   (building-type-count-total siege-workshop < 2)
   (can-build siege-workshop)
   =>
   (chat-local-to-self "building siege-workshop.")
   (build siege-workshop)
)

(defrule
(building-type-count-total siege-workshop == 2)
(can-research ri-capped-ram)
=>
(chat-local-to-self "researching Capped ram.")
(research ri-capped-ram)
)

(defrule
(building-type-count-total siege-workshop == 2)
(can-research ri-siege-ram)
=>
(chat-local-to-self "researching Siege ram.")
(research ri-siege-ram)
)
; ****************FARMING***************
; keep farms at lower priority than buildings
(defrule
   (goal g-age-status gv-dark-age) 
   (building-type-count-total mill > 0);build mill before farms
   (building-type-count lumber-camp > 0) ; We want a lumber camp before farms
   (wood-amount > 100)
   (unit-type-count-total villager > 15); wait till atleast 15 vills before farms.
   (or(building-type-count-total farm < 15)
      (idle-farm-count == 0 ))
   (idle-farm-count < 2)
   (can-build farm)
   =>
   (chat-local-to-self "building farm.")
   (build farm)
)
(defrule
   (goal g-age-status gv-feudal-age) 
   (building-type-count-total farm <= 12)
   (idle-farm-count == 0)
   (can-build farm)
   =>
   (chat-local-to-self "building farm.")
   (build farm)
)

(defrule
   (or(current-age > feudal-age)
      (goal g-age-status gv-advancing-to-feudal))  
   (idle-farm-count == 0)
   (can-build farm)
   =>
   (chat-local-to-self "building farm too.")
   (build farm)
)
;******************************************************************************
;
; Training Rules
;
;******************************************************************************
(defrule
   (current-age == dark-age) 
   (unit-type-count-total villager < dark-age-max-villagers) 
   (can-train villager)
   =>
   (train villager)
)

(defrule
   (current-age == feudal-age) 
   (unit-type-count-total villager < feudal-age-max-villagers) 
   (can-train villager)
   =>
   (train villager)
)

(defrule                     
   (current-age > feudal-age) 
   (unit-type-count-total villager < 100)
   (can-train villager)
   =>
   (train villager)
)
;******************************************************************************
;
; Taunting Rules
;
;******************************************************************************

;******************************************************************************
;
; Resignation Rules
;
;******************************************************************************

;******************************************************************************
;
; Town-Size Rules
;
;******************************************************************************

;******************************************************************************
;
; Defend Rules
;
;******************************************************************************

;******************************************************************************
;
; Counter-Attack Rules
;
;******************************************************************************

;******************************************************************************
;
; Attack Rules
;
;******************************************************************************

;###############################################
;Miscelleneous
;###############################################
; research long swordsman
(defrule
   (current-age == imperial-age)
   (can-research ri-long-swordsman)
   =>
   (research ri-long-swordsman)
   (chat-local-to-self "Researching Long Swordsman.")
)

; research two-handed-swordsman
(defrule
   (can-research ri-two-handed-swordsman)
   =>
   (research ri-two-handed-swordsman)
   (chat-local-to-self "Researching two-handed-swordsman.")
)

; research champion
(defrule
   (can-research ri-champion)
   =>
   (research ri-champion)
   (chat-local-to-self "Researching champion.")
)
; research pikeman
(defrule
   (can-research ri-pikeman)
   =>
   (research ri-pikeman)
   (chat-local-to-self "Researching pikeman.")
)
; research elite skrimsher
(defrule
   (unit-type-count skirmisher > 5)
   (can-research ri-elite-skirmisher)
   =>
   (research ri-elite-skirmisher)
   (chat-local-to-self "Researching elite-skirmisher.")
)
; research Halberdier 
(defrule
   (can-research ri-halberdier )
   =>
   (research ri-halberdier)
   (chat-local-to-self "Researching halberdier.")
)
(defrule
   (can-research ri-plate-mail)
   =>
   (research ri-plate-mail)
   (chat-to-allies "Researching plate mail armor.")
)

(defrule
   (can-research ri-blast-furnace)
   =>
   (research ri-blast-furnace)
   (chat-to-allies "Researching blast furnace.")
)

(defrule
   (can-research ri-conscription)
   =>
   (research ri-conscription)
   (chat-to-allies "Researching conscription.")
)
(defrule
   (current-age > castle-age)
   (can-research ri-tracking)
   =>
   (research ri-tracking)
)

(defrule
   (current-age > castle-age)   
   (can-research ri-squires)
   =>
   (research ri-squires)
)
(defrule
   (current-age > castle-age)   
   (can-research ri-arson)
   =>
   (research ri-arson)
)

(defrule
   (goal g-age-status gv-castle-age)
         (unit-type-count monk < 1) ; always keep one monk
   (can-train monk)
   =>
   (train monk)
) 

(defrule
   (or(current-age > feudal-age)
      (goal g-age-status gv-advancing-to-castle))
   (military-population <= 10)  
   (can-train spearman-line)
   =>
   (train spearman-line)
)

(defrule
   (goal g-age-status gv-castle-age)
   (unit-type-count villager > 50)
      (military-population <= 20)  
   (can-train spearman-line)
   =>
   (train spearman-line)
) 
(defrule
   (goal g-age-status gv-castle-age)
         (players-unit-type-count any-enemy archer-line > 5)
   (can-train skirmisher-line)
   =>
   (train skirmisher-line)
) 

(defrule
   (goal g-age-status gv-imperial-age)
         (players-unit-type-count any-enemy archer-line > 10)
   (can-train skirmisher-line)
   =>
   (train skirmisher-line)
) 
(defrule
   (goal g-age-status gv-imperial-age)
   (unit-type-count villager > 90)
   (can-train militiaman-line)
   =>
   (train militiaman-line)
) 
(defrule
   (goal g-age-status gv-advancing-to-imperial)  
   (unit-type-count villager > 90)
   (can-train militiaman-line)
   =>
   (train militiaman-line)
) 

(defrule
   (current-age > castle-age)  
   (can-train spearman-line)
   =>
   (train spearman-line)
)

(defrule
   (military-population >= 80)
   (can-train battering-ram-line)
   =>
   (train battering-ram-line)
)
(defrule
   (military-population >= 80)
   (can-train trebuchet)
   (unit-type-count trebuchet < 3)
   =>
   (train trebuchet)
)
; be conservative as standard AI doesnt attack much
(defrule
(military-population >= 80)
=>
(attack-now)
)