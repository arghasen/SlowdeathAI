(defrule
(true)
=>
(set-strategic-number sn-minimum-civilian-explorers 0); minimum number of vills to explore
(set-strategic-number sn-cap-civilian-explorers 0); max number of vills to explore
(set-strategic-number sn-total-number-explorers 1); total number of explorers
(set-strategic-number sn-number-explore-groups 1); number of explore groups , unused by ai, always set equal to num of explorers
(set-strategic-number sn-initial-exploration-required 0); percent to explore before building
(disable-self)
)

(defrule
   (true)
=>
   (set-strategic-number sn-maximum-food-drop-distance 4)
   (set-strategic-number sn-maximum-fish-boat-drop-distance 8)
   (set-strategic-number sn-maximum-wood-drop-distance 5)
   (set-strategic-number sn-maximum-gold-drop-distance 4)
   (set-strategic-number sn-maximum-stone-drop-distance 4)
   (set-strategic-number sn-maximum-hunt-drop-distance 5)
   (disable-self)
)

(defrule
   (current-age == dark-age)
   =>
   (set-strategic-number sn-food-gatherer-percentage 60)
   (set-strategic-number sn-wood-gatherer-percentage 40)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
    (unit-type-count villager > 0 )
    =>
    (chat-local-to-self "I just made my first rule!!")
    (disable-self)
)

(defrule
   (can-research feudal-age)
   =>
   (research feudal-age)
   (chat-local-to-self "Feudal Age, here we come!")
)

(defrule
   (can-research castle-age)
   =>
   (research castle-age)
   (chat-local-to-self "Castle Age, here we come!")
)

(defrule
   (can-research imperial-age)
   =>
   (research imperial-age)
   (chat-local-to-self "Imperial Age, here we come!")
)

(defrule
    (can-build house)
    (housing-headroom < 4) ;the difference between the current population and supportable population (not the
    ;amount of population houses support)
    (population-headroom > 3) ;the difference between the current population and the population limit
    =>
    (build house)
)

(defrule
    (unit-type-count-total villager < 30)
    (can-train villager)
    =>
    (train villager)
)

(defrule
   (food-amount < 50)
   (can-research ri-loom)
   =>
   (research ri-loom)
   (chat-local-to-self "Researching loom.")
)

(defrule
    (building-type-count-total house > 0) ; We want to build a house before a mill
    (building-type-count-total mill == 0) ; Prevents the construction of multiple mills
    (resource-found food) ; Builds a mill only if forage bushes or deer is found
    (can-build mill)
    =>
    (build mill)
)

(defrule
    (building-type-count-total lumber-camp == 0)
    (resource-found wood)
    (can-build lumber-camp)
    =>
    (build lumber-camp)
)

(defrule
    (current-age == dark-age)
    (building-type-count-total mill > 0);build mill before farms
    (building-type-count-total lumber-camp > 0) ; We want a lumber camp before farms
    (unit-type-count-total villager > 15)
    (building-type-count-total farm < 15)
    (idle-farm-count < 4) ; Only build farms if there are less than 4 idle farms
    (can-build farm)
    =>
    (build farm)
)

(defrule
   (current-age==feudal-age)  
   =>
   (set-strategic-number sn-food-gatherer-percentage 40)
   (set-strategic-number sn-wood-gatherer-percentage 50)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
    (current-age==feudal-age)  
    (building-type-count-total mining-camp == 0)
    (resource-found gold)
    (can-build mining-camp)
    =>
    (build mining-camp)
)