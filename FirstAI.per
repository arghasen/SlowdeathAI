(defrule
(true)
=>
(set-strategic-number sn-minimum-civilian-explorers 0); minimum number of vills to explore
(set-strategic-number sn-cap-civilian-explorers 0); max number of vills to explore
(set-strategic-number sn-total-number-explorers 1); total number of explorers
(set-strategic-number sn-number-explore-groups 1); number of explore groups , unused by ai, always set equal to num of explorers
(set-strategic-number sn-initial-exploration-required 0); percent to explore before building
(disable-self)
)

(defrule
   (true)
=>
   (set-strategic-number sn-maximum-food-drop-distance 4)
   (set-strategic-number sn-maximum-fish-boat-drop-distance 8)
   (set-strategic-number sn-maximum-wood-drop-distance 5)
   (set-strategic-number sn-maximum-gold-drop-distance 4)
   (set-strategic-number sn-maximum-stone-drop-distance 4)
   (set-strategic-number sn-maximum-hunt-drop-distance 5)
   (disable-self)
)

(defrule
   (current-age == dark-age)
   =>
   (set-strategic-number sn-food-gatherer-percentage 60)
   (set-strategic-number sn-wood-gatherer-percentage 40)
   (set-strategic-number sn-gold-gatherer-percentage 0)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

(defrule
    (unit-type-count villager > 0 )
    =>
    (chat-local-to-self "I just made my first rule!!")
    (disable-self)
)

(defrule
   (can-research feudal-age)
   =>
   (research feudal-age)
   (chat-local-to-self "Feudal Age, here we come!")
)

(defrule
   (can-research castle-age)
   =>
   (research castle-age)
   (chat-local-to-self "Castle Age, here we come!")
)

(defrule
   (can-research imperial-age)
   =>
   (research imperial-age)
   (chat-local-to-self "Imperial Age, here we come!")
)

(defrule
    (can-build house)
    (housing-headroom < 4) ;the difference between the current population and supportable population (not the
    ;amount of population houses support)
    (population-headroom > 3) ;the difference between the current population and the population limit
    =>
    (chat-local-to-self "building house.")
    (build house)
)

(defrule
    (unit-type-count-total villager < 100)
    (can-train villager)
    =>
    (train villager)
)

(defrule
   (food-amount < 50)
   (can-research ri-loom)
   =>
   (research ri-loom)
   (chat-local-to-self "Researching loom.")
)

(defrule
    (building-type-count-total house > 0) ; We want to build a house before a mill
    (building-type-count-total mill == 0) ; Prevents the construction of multiple mills
    (resource-found food) ; Builds a mill only if forage bushes or deer is found
    (can-build mill)
    =>
    (chat-local-to-self "building mill.")
    (build mill)
)

(defrule
    (building-type-count-total lumber-camp == 0)
    (resource-found wood)
    (can-build lumber-camp)
    =>
    (chat-local-to-self "building lumbercamp.")
    (build lumber-camp)
)

(defrule
   (current-age == feudal-age)  
   =>
   (set-strategic-number sn-food-gatherer-percentage 50)
   (set-strategic-number sn-wood-gatherer-percentage 40)
   (set-strategic-number sn-gold-gatherer-percentage 10)
   (set-strategic-number sn-stone-gatherer-percentage 0)
)

; build a gold mine in feudal age
(defrule
    (current-age == feudal-age)  
    (building-type-count-total mining-camp == 0)
    (resource-found gold)
    (can-build mining-camp)
    =>
    (chat-local-to-self "building mining-camp.")
    (build mining-camp)
)

;build a barrack in feudal age
(defrule
   (current-age > dark-age)
   (building-type-count-total barracks == 0)
   (can-build barracks)
   =>
   (chat-local-to-self "building barracks.")
   (build barracks)
)

; research man at arms
(defrule
   (can-research ri-man-at-arms)
   =>
   (chat-local-to-self "Researching man at arms.")
   (research ri-man-at-arms)
)
; build a blacksmith
(defrule
   (current-age >= feudal-age)
   (building-type-count-total barracks > 0)
   (building-type-count-total blacksmith == 0)
   (can-build blacksmith)
   =>
   (chat-local-to-self "building blacksmith.")
   (build blacksmith)
)
; build a market
(defrule
   (current-age == feudal-age)
   (building-type-count-total blacksmith > 0)
   (building-type-count-total market == 0)
   (can-build market)
   =>
   (chat-local-to-self "building market.")
   (build market)
)

; build a monastry
(defrule
   (current-age == castle-age)
   (building-type-count-total monastry == 0)
   (can-build monastry)
   =>
   (chat-local-to-self "building monastry.")
   (build monastry)
)

; build a university
(defrule
   (current-age == castle-age)
   (building-type-count-total university == 0)
   (can-build university)
   =>
   (chat-local-to-self "building university.")
   (build university)
)

; keep farms at lower priority than buildings
(defrule
    (building-type-count-total mill > 0);build mill before farms
    (building-type-count-total lumber-camp > 0) ; We want a lumber camp before farms
    (unit-type-count-total villager > 15)
    (building-type-count-total farm < 15)
    (idle-farm-count == 0) ; Only build farms if there are no idle farms
    (can-build farm)
    =>
    (chat-local-to-self "building farm.")
    (build farm)
)

; research long swordsman
(defrule
   (can-research ri-long-swordsman)
   =>
   (research ri-long-swordsman)
   (chat-local-to-self "Researching Long Swordsman.")
)

; research two-handed-swordsman
(defrule
   (can-research ri-two-handed-swordsman)
   =>
   (research ri-two-handed-swordsman)
   (chat-local-to-self "Researching two-handed-swordsman.")
)

;start trining militia after feudal.
(defrule
   (current-age > dark-age)  
   (can-train militiaman-line)
   =>
   (train militiaman-line)
)

(defrule
(military-population >= 10)
=>
(attack-now)
)